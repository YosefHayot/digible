
# coding: utf-8

# # JSON examples and exercise
# ****
# + get familiar with packages for dealing with JSON
# + study examples with JSON strings and files 
# + work on exercise to be completed and submitted 
# ****
# + reference: http://pandas.pydata.org/pandas-docs/stable/io.html#io-json-reader
# + data source: http://jsonstudio.com/resources/
# ****

# In[83]:

import pandas as pd


# ## imports for Python, Pandas

# In[85]:

import json
from pandas.io.json import json_normalize


# In[ ]:

sample_object = {'Name':'John', 'Location':{'City':'Los Angeles','State':'CA'}, 'hobbies':['Music', 'Running']}
json_normalize(sample_object)


# ## JSON example, with string
# 
# + demonstrates creation of normalized dataframes (tables) from nested json string
# + source: http://pandas.pydata.org/pandas-docs/stable/io.html#normalization

# In[7]:

# define json string
data = [{'state': 'Florida', 
         'shortname': 'FL',
         'info': {'governor': 'Rick Scott'},
         'counties': [{'name': 'Dade', 'population': 12345},
                      {'name': 'Broward', 'population': 40000},
                      {'name': 'Palm Beach', 'population': 60000}]},
        {'state': 'Ohio',
         'shortname': 'OH',
         'info': {'governor': 'John Kasich'},
         'counties': [{'name': 'Summit', 'population': 1234},
                      {'name': 'Cuyahoga', 'population': 1337}]}]


# In[112]:

# further populate tables created from nested element
#json_normalize(data, 'state', 'counties' )


# In[ ]:




# In[103]:

json_normalize(data,'counties', ['state', 'shortname', ['info', 'governor']])


# ****
# ## JSON example, with file
# 
# + demonstrates reading in a json file as a string and as a table
# + uses small sample file containing data about projects funded by the World Bank 
# + data source: http://jsonstudio.com/resources/

# In[54]:

# load json file as string
json.load((open('data/world_bank_projects_less.json')))


# In[105]:

# load as Pandas dataframe
sample_json_df = pd.read_json('data/world_bank_projects_less.json')
sample_json_df


# In[106]:

sample_json_df


# ****
# ## JSON exercise
# 
# Using data in file 'data/world_bank_projects.json' and the techniques demonstrated above,
# 1. Find the 10 countries with most projects
# 2. Find the top 10 major project themes (using column 'mjtheme_namecode')
# 3. In 2. above you will notice that some entries have only the code and the name is missing. Create a dataframe with the missing names filled in.

# In[57]:

sample_json_df = pd.read_json('data/world_bank_projects.json')
sample_json_df


# In[94]:

wbpDF = pd.read_json('data/world_bank_projects.json')
wbpDF 


# In[88]:

pd.set_option('display.float_format', lambda x: '%.3f' % x)



# In[87]:

wbpDF.describe()


# In[89]:

wbpDF.to_excel('worldbankprojects.xlsx', sheet_name='Sheet1')


# In[90]:

#first 5 rows 
wbpDF.head()


# In[91]:

wbpDF.countryshortname.value_counts()


# In[125]:

wbpDF.isnull().tail()


# In[127]:

wbpDF.isnull().sum()


# In[ ]:




# In[ ]:




# In[ ]:




# In[ ]:



